@model SALEERP.ViewModel.MirrorDetailsVM;
@using PagedList.Mvc;
@{
    ViewBag.Title = "Mirro";
    if (this.ViewContext.FormContext == null)
    {
        this.ViewContext.FormContext = new FormContext();
    }

}

<script src="https://code.jquery.com/jquery-1.12.4.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script>
    @*function findname(id) {
        debugger;
        $(id).on('autocomplete', function (event, ui) {
            source:  '@Url.Action("Search")'
        });

    }*@
    @*$(document).ready(function () {
       $('#dataTabledriver').find('input[id^="Driver_List"]').on("keydown", function()
        {
                debugger;
             $('#dataTabledriver').find('input[id^="Driver_List"]').autocomplete( function (event, ui) {
            source:  '@Url.Action("Search")'
        });
            });
    });*@
    $(document).ready(function () {

        $('body').on('focus', 'input[id^="Driver_List"] ', function(){
            $(this).autocomplete({
                source: '@Url.Action("Driver_Search")',
                select: function (event, ui) {

                //set tagids to save
                    $(this).val(ui.item.value);
                  
                    $(this).parent().find('input[type=hidden]').val(ui.item.id);
                //Tags for display
               // this.value = ui.value;
                return false;
            }
            });
    });

        $('body').on('focus', 'input[id^="PAgentID_List"] ', function(){
            $(this).autocomplete({
                source: '@Url.Action("Principle_Search")',
                select: function (event, ui) {

                //set tagids to save
                    $(this).val(ui.item.value);
                    $(this).parent().find('input[type=hidden]').val(ui.item.id);
                //Tags for display
               // this.value = ui.value;
                return false;
            }
            });
        });
         $('body').on('focus', 'input[id^="EAgentID_List"] ', function(){
            $(this).autocomplete({
                source: '@Url.Action("EAgent_Search")',
                select: function (event, ui) {

                //set tagids to save
                    $(this).val(ui.item.value);
                    $(this).parent().find('input[type=hidden]').val(ui.item.id);
                //Tags for display
               // this.value = ui.value;
                return false;
            }
            });
         });
        $('body').on('focus', 'input[id^="GuideAgentID_List"] ', function(){
            $(this).autocomplete({
                source: '@Url.Action("Guide_Search")',
                select: function (event, ui) {

                //set tagids to save
                    $(this).val(ui.item.value);
                    $(this).parent().find('input[type=hidden]').val(ui.item.id);
                //Tags for display
               // this.value = ui.value;
                return false;
            }
            });
        });
        $('body').on('focus', 'input[id^="LeaderAgentID_List"] ', function(){
            $(this).autocomplete({
                source: '@Url.Action("Lead_Search")',
                select: function (event, ui) {

                //set tagids to save
                    $(this).val(ui.item.value);
                    $(this).parent().find('input[type=hidden]').val(ui.item.id);
                //Tags for display
               // this.value = ui.value;
                return false;
            }
            });
         });
        $('body').on('focus', 'input[id^="EscortAgentID_List"] ', function(){
            $(this).autocomplete({
                source: '@Url.Action("Escort_Search")',
                select: function (event, ui) {

                //set tagids to save
                    $(this).val(ui.item.value);
                    $(this).parent().find('input[type=hidden]').val(ui.item.id);
                //Tags for display
               // this.value = ui.value;
                return false;
            }
            });
        });
        $('body').on('focus', 'input[id^="DemoAgentID_List"] ', function(){
            $(this).autocomplete({
                source: '@Url.Action("Demo_Search")',
                select: function (event, ui) {

                //set tagids to save
                    $(this).val(ui.item.value);
                    $(this).parent().find('input[type=hidden]').val(ui.item.id);
                //Tags for display
               // this.value = ui.value;
                return false;
            }
            });
        });

    });
</script>
@using (Html.BeginForm("Add", "Mirror"))
{
    @Html.AntiForgeryToken()
    <section class="content">
        <div class="container-fluid">
            <div class="row">

                <!-- right column -->
                <div class="col-md-12">

                    <!-- general form elements disabled -->

                    <div class="card card-warning">


                        <div class="col-sm-2" style="float:left;width:300px;padding-left:10px;">
                            <div class="form-group">
                                <label asp-for="MirrorDate" class="control-label"></label>
                                <input asp-for="MirrorDate" style="color:red" />
                                <span asp-validation-for="MirrorDate" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="card-header">
                            <h3 class="card-title">Driver Details</h3>
                        </div>
                        <!-- /.card-header -->

                        <div class="card-body">

                            <div class="col-sm-2">
                                <div class="form-group">
                                    <label></label>
                                    <span class="input-group-append">
                                        <button type="button" id="addNewdriver" href="javascript:void(0)" class="btn btn-info btn-flat">ADD DRIVER +</button>
                                    </span>
                                </div>
                            </div>
                            <table id="dataTabledriver" class="">
                                <tr>
                                    <td class="">

                                        <div class="form-group">
                                            @* <input type="hidden" id="agentid" value="" />*@
                                            @Html.HiddenFor(model => model.Driver_List[0].agentId, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "Enter ..." } })



                                            @Html.LabelFor(model => model.Driver_List[0].Drivername)
                                            @*<input asp-for="Driver_List[0].Drivername"  onblur="findname(this.name)" />*@
                                            @Html.EditorFor(model => model.Driver_List[0].Drivername, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "Enter ..." } })
                                            @Html.ValidationMessageFor(model => model.Driver_List[0].Drivername, "", new { @class = "text-danger" })

                                        </div>
                                    </td>
                                    <td class="">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Driver_List[0].Mob)
                                            @Html.EditorFor(model => model.Driver_List[0].Mob, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "Enter ..." } })
                                            @Html.ValidationMessageFor(model => model.Driver_List[0].Mob, "", new { @class = "text-danger" })
                                        </div>
                                    </td>
                                    <td class="">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Driver_List[0].vehicleNo)
                                            @Html.EditorFor(model => model.Driver_List[0].vehicleNo, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "Enter ..." } })
                                            @Html.ValidationMessageFor(model => model.Driver_List[0].vehicleNo, "", new { @class = "text-danger" })
                                        </div>
                                    </td>
                                    <td class="">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.vehicletypeid)
                                            <div>
                                                @Html.DropDownListFor(model => model.Driver_List[0].vehicletypeid, Model.vehicledetails as IEnumerable<SelectListItem>, "Select", htmlAttributes: new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.Driver_List[0].vehicletypeid, "", new { @class = "text-danger" })
                                            </div>
                                            @*<label>Vehicle</label>
                                                <select asp-for="Driver_List[0].vehicletypeid" asp-items="Model.vehicledetails" required class="form-control">
                                                    <option value="">--Please select--</option>
                                                </select>*@
                                        </div>
                                    </td>
                                    <td class="">
                                        <div class="form-group">

                                            @Html.LabelFor(model => model.IsParchi)
                                            <div class="col-md-10">
                                                @Html.CheckBoxFor(model => model.Driver_List[0].isparchiamount, new { htmlAttributes = new { @class = "form-control" } })
                                                @*<input class="form-check-input" value="@Model.Driver_List" type="checkbox">*@
                                            </div>

                                        </div>
                                    </td>
                                    <td></td>
                                </tr>
                            </table>




                            @*  }*@
                            @* }*@
                            @*}*@


                        </div>
                        <!-- /.card-body -->
                    </div>
                    <!-- /.card -->
                    <!-- general form elements disabled -->
                    <!-- /.card -->
                </div>
                <!--/.col (right) -->
                <div class="col-md-12">

                    <!-- general form elements disabled -->
                    <div class="card card-warning">
                        <div class="card-header">
                            <h3 class="card-title">Agent Details</h3>
                        </div>
                        <!-- /.card-header -->
                        <div class="card-body">

                            <table id="dataTableagent" class="">
                                <tr>
                                    <div class="">
                                        <div class="form-group">
                                            <label></label>
                                            <span class="input-group-append">
                                                <button type="button" id="addnewagent" href="javascript:void(0)" class="btn btn-info btn-flat">ADD AGENT +</button>
                                            </span>
                                        </div>
                                    </div>
                                    <div style="margin-left: 132px;margin-top:-85px;">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.SeriesId)
                                            <div class="" style="width:200px;">
                                                @Html.DropDownListFor(model => model.SeriesId, Model.seriesdetails as IEnumerable<SelectListItem>, "Select", htmlAttributes: new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.SeriesId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                    </div>
                                    <td class="">
                                        <!-- text input -->
                                        <div class="form-group">
                                            @Html.HiddenFor(model => model.PAgentID_List[0].agentid, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "Enter ..." } })
                                            <label>Principle Agent</label>
                                            @Html.EditorFor(model => model.PAgentID_List[0].agentname, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "Enter ..." } })
                                            @Html.ValidationMessageFor(model => model.PAgentID_List[0].agentname, "", new { @class = "text-danger" })
                                        </div>
                                    </td>

                                    <td class="">
                                        <div class="form-group">

                                            @Html.HiddenFor(model => model.EAgentID_List[0].agentid, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "Enter ..." } })
                                            <label>Excursion Agent</label>
                                            @Html.EditorFor(model => model.EAgentID_List[0].agentname, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "Enter ..." } })
                                            @Html.ValidationMessageFor(model => model.EAgentID_List[0].agentname, "", new { @class = "text-danger" })
                                        </div>
                                    </td>
                                    <td></td>
                                </tr>
                            </table>



                        </div>
                        <!-- /.card-body -->
                    </div>
                    <!-- /.card -->
                    <!-- general form elements disabled -->
                    <!-- /.card -->
                </div>
                <div class="col-md-12">

                    <!-- general form elements disabled -->
                    <div class="card card-warning">
                        <div class="card-header">
                            <h3 class="card-title">Tour Details</h3>
                        </div>
                        <!-- /.card-header -->
                        <div class="card-body">

                            <div class="">
                                <div style="float:left;margin-top:31px;">
                                    <button type="button" id="addnewguide" href="javascript:void(0)" class="btn btn-info btn-flat">+</button>
                                </div>
                                @*<button type="button" onclick="CreateView()" href="javascript:void(0)" class="btn btn-info btn-flat">-</button>*@
                                <table id="dataTableguide">
                                    <tr>
                                        <td class="">
                                            <!-- text input -->
                                            <div class="form-group">
                                                @Html.HiddenFor(model => model.GuideAgentID_List[0].agentid, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "Enter ..." } })
                                                <label>Guide Name</label>



                                                @Html.EditorFor(model => model.GuideAgentID_List[0].agentname, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "Enter ..." } })
                                                @Html.ValidationMessageFor(model => model.GuideAgentID_List[0].agentname, "", new { @class = "text-danger" })


                                            </div>
                                        </td>
                                        <td></td>
                                    </tr>
                                </table>
                                <div style="margin-left: 351px;margin-top:-86px;">
                                    <div style="float:left;margin-top:31px;">
                                        <button type="button" id="addnewlead" href="javascript:void(0)" class="btn btn-info btn-flat">+</button>
                                    </div>

                                    <table id="dataTablelead" cellpadding="0" cellspacing="0">
                                        <tr>
                                            <td class="">
                                                <div class="form-group">

                                                    @Html.HiddenFor(model => model.LeaderAgentID_List[0].agentid, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "Enter ..." } })
                                                    <label>Tour Leader</label>



                                                    @Html.EditorFor(model => model.LeaderAgentID_List[0].agentname, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "Enter ..." } })
                                                    @Html.ValidationMessageFor(model => model.LeaderAgentID_List[0].agentname, "", new { @class = "text-danger" })

                                                </div>
                                            </td>
                                            <td></td>
                                        </tr>
                                    </table>
                                </div>
                                <div style="margin-left: 724px;margin-top:-86px;">
                                <div style="float:left;margin-top:31px;">
                                    <button type="button" id="addnewescort" href="javascript:void(0)" class="btn btn-info btn-flat">+</button>
                                </div>

                                <table id="dataTableescort">
                                    <tr>
                                        <td class="">
                                            <div class="form-group">

                                                @Html.HiddenFor(model => model.EscortAgentID_List[0].agentid, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "Enter ..." } })
                                                <label>Tour Escort</label>



                                                @Html.EditorFor(model => model.EscortAgentID_List[0].agentname, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "Enter ..." } })
                                                @Html.ValidationMessageFor(model => model.EscortAgentID_List[0].agentname, "", new { @class = "text-danger" })

                                            </div>
                                        </td>
                                        <td></td>
                                    </tr>
                                </table>
                                    </div>
                            </div>


                        </div>
                        <!-- /.card-body -->
                    </div>
                    <!-- /.card -->
                    <!-- general form elements disabled -->
                    <!-- /.card -->
                </div>
                <div class="col-md-12">

                    <!-- general form elements disabled -->
                    <div class="card card-warning">
                        <div class="card-header">
                            <h3 class="card-title">Other Details</h3>
                        </div>
                        <!-- /.card-header -->
                        <div class="card-body">

                            <div class="row">
                                <div class="col-sm-2">
                                    <!-- text input -->
                                    <div class="form-group">
                                        <label>Pax</label>
                                        @Html.EditorFor(model => model.Pax, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "Enter ..." } })
                                        @Html.ValidationMessageFor(model => model.Pax, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-sm-2">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Countryid)
                                        <div class="col-md-10">
                                            @Html.DropDownListFor(model => model.Countryid, Model.countrydetails as IEnumerable<SelectListItem>, "Select", htmlAttributes: new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.Countryid, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-2">
                                    <div class="form-group">
                                        @*<label>Language</label>*@
                                        @Html.LabelFor(model => model.Languageid)
                                        <div class="col-md-10">
                                            @Html.DropDownListFor(model => model.Languageid, Model.languagedetails as IEnumerable<SelectListItem>, "Select", htmlAttributes: new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.Languageid, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                    <div>
                                        <table id="dataTabledemo" cellpadding="0" cellspacing="0">
                                            <tr>
                                                <td class="col-sm-2">
                                                    <div class="form-group">
                                                        @Html.HiddenFor(model => model.DemoAgentID_List[0].agentid, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "Enter ..." } })
                                                        <label>Tour Escort</label>



                                                        @Html.EditorFor(model => model.DemoAgentID_List[0].agentname, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "Enter ..." } })
                                                        @Html.ValidationMessageFor(model => model.DemoAgentID_List[0].agentname, "", new { @class = "text-danger" })

                                                    </div>
                                                </td>
                                                <td></td>
                                            </tr>
                                        </table>
                                    </div>
                                    <div style="margin-top:32px;">
                                        <button type="button" id="addnewdemo" href="javascript:void(0)" class="btn btn-info btn-flat">+</button>
                                        @*<button type="button" onclick="CreateView()" href="javascript:void(0)" class="btn btn-info btn-flat">-</button>*@
                                    </div>


                            </div>
                            <!-- /.card-body -->
                        </div>
                        <div style="float:right;align-content:center;margin-left:460px;">
                            <button type="submit" style="background-color:orangered" class="btn btn-info btn-flat">Finish</button>
                            <button type="button" href="javascript:void(0)" style="background-color:orangered" class="btn btn-info btn-flat">Cancel</button>
                        </div>
                        <!-- /.card -->
                        <!-- general form elements disabled -->
                        <!-- /.card -->
                    </div>
                </div>
            </div>
        </div>
    </section>
}
<div>
    @Html.ActionLink("Back to List", "Index")
</div>


<script>
    $("#submit").click(function () {
        var form = $("form")
            .removeData("validator") /* added by the raw jquery.validate plugin */
            .removeData("unobtrusiveValidation");  /* added by the jquery unobtrusive plugin*/

        $.validator.unobtrusive.parse(form);

        form.data('unobtrusiveValidation');
    });


</script>
<script language="javascript">
    $(document).ready(function () {
     @*$('#dataTabledriver').find('input[id^="Driver_List"]').autocomplete({
            source: '@Url.Action("Search")'
        });*@
        //1. Add new row
        $("#addNewdriver").click(function (e) {
            var markup;
           // e.preventDefault();
            // $("#dataTable").show();
            //  $("#dataTablebank").show();

            var $tableBody = $("#dataTabledriver");
            var $trLast = $tableBody.find("tr:last");

            var $trNew;

            var suffix = $trLast.find(':input:first').attr('name');

            if (typeof (suffix) != "undefined") {

                $trNew = $trLast.clone();
            }
            else {

                $trNew = "<tr style='border:1px solid black'><td><input class='input100' placeholder='UserName' id='AgentContact_0_Mobile' name='AgentContact[0].Mobile' type='text'/></td><td><input class='input100' placeholder='UserEmail' id='AgentContact_0_Email'  name='AgentContact[0].Email' type='text'/></td><td><a href='#' onclick='Deleteqry(this)' class='remove'>Remove</a></td></tr>";
                $trLast.after($trNew);
            }

            var suffix = $trNew.find(':input:first').attr('name').match(/\d+/);
            $trNew.find("td:last").html('<a href="#" onclick="Deleteqry(this)" class="remove">Remove</a>');
            $.each($trNew.find(':input'), function (i, val) {
                // Replaced Name
                var oldN = $(this).attr('name');
               // var oldI = $(this).attr('id');
                var newN = oldN.replace('[' + suffix + ']', '[' + (parseInt(suffix) + 1) + ']');
             //   var newI = oldI.replace('_' + suffix + '__', '_' + (parseInt(suffix) + 1) + '__');

                $(this).attr('name', newN);
             //   $(this).attr('id', newI);
                //Replaced value
                var type = $(this).attr('type');
                if (typeof (type) != "undefined") {
                    if (type.toLowerCase() == "text") {
                        $(this).attr('value', '');
                    }
                }

                // If you have another Type then replace with default value
                $(this).removeClass("input-validation-error");

            });
            $trLast.after($trNew);

            //  Re-assign Validation
            //var form = $("form")
            //    .removeData("validator")
            //    .removeData("unobtrusiveValidation");
            //$.validator.unobtrusive.parse(form);
        });

        // 2. Bank Details
        $("#addnewagent").click(function (e) {
            var markup;
            e.preventDefault();
            $("#dataTableagent").show();
            //  $("#dataTablebank").show();
            debugger;
            var $tableBody = $("#dataTableagent");
            var $trLast = $tableBody.find("tr:last");

            var $trNew;

            var suffix = $trLast.find(':input:first').attr('name');
            debugger;
            if (typeof (suffix) != "undefined") {

                $trNew = $trLast.clone();
            }
            else {

                $trNew = "<tr style='border:1px solid black'><td><input class='input100' placeholder='UserName' id='AgentContact_0_Mobile' name='AgentContact[0].Mobile' type='text'/></td><td><input class='input100' placeholder='UserEmail' id='AgentContact_0_Email'  name='AgentContact[0].Email' type='text'/></td><td><a href='#' onclick='Deleteqry(this)' class='remove'>Remove</a></td></tr>";
                $trLast.after($trNew);
            }

            var suffix = $trNew.find(':input:first').attr('name').match(/\d+/);
            $trNew.find("td:last").html('<a href="#" onclick="Deleteqry(this)" class="remove">Remove</a>');
            $.each($trNew.find(':input,select'), function (i, val) {
                // Replaced Name
                var oldN = $(this).attr('name');
                var newN = oldN.replace('[' + suffix + ']', '[' + (parseInt(suffix) + 1) + ']');
                $(this).attr('name', newN);
                //Replaced value
                debugger;
                var type = $(this).attr('type');
                if (typeof (type) != "undefined") {
                    if (type.toLowerCase() == "text") {
                        $(this).attr('value', '');
                    }

                }
                // If you have another Type then replace with default value
                $(this).removeClass("input-validation-error");

            });
            $trLast.after($trNew);

            //  Re-assign Validation
            //var form = $("form")
            //    .removeData("validator")
            //    .removeData("unobtrusiveValidation");
            //$.validator.unobtrusive.parse(form);
        });

        $("#addnewguide").click(function (e) {
            var markup;
            e.preventDefault();
            $("#dataTableguide").show();
            //  $("#dataTablebank").show();
            debugger;
            var $tableBody = $("#dataTableguide");
            var $trLast = $tableBody.find("tr:last");

            var $trNew;

            var suffix = $trLast.find(':input:first').attr('name');
            debugger;
            if (typeof (suffix) != "undefined") {

                $trNew = $trLast.clone();
            }
            else {

                $trNew = "<tr style='border:1px solid black'><td><input class='input100' placeholder='UserName' id='AgentContact_0_Mobile' name='AgentContact[0].Mobile' type='text'/></td><td><input class='input100' placeholder='UserEmail' id='AgentContact_0_Email'  name='AgentContact[0].Email' type='text'/></td><td><a href='#' onclick='Deleteqry(this)' class='remove'>Remove</a></td></tr>";
                $trLast.after($trNew);
            }

            var suffix = $trNew.find(':input:first').attr('name').match(/\d+/);
            $trNew.find("td:last").html('<a href="#" onclick="Deleteqry(this)" class="remove">Remove</a>');
            $.each($trNew.find(':input,select'), function (i, val) {
                // Replaced Name
                var oldN = $(this).attr('name');
                var newN = oldN.replace('[' + suffix + ']', '[' + (parseInt(suffix) + 1) + ']');
                $(this).attr('name', newN);
                //Replaced value
                debugger;
                var type = $(this).attr('type');
                if (typeof (type) != "undefined") {
                    if (type.toLowerCase() == "text") {
                        $(this).attr('value', '');
                    }

                }
                // If you have another Type then replace with default value
                $(this).removeClass("input-validation-error");

            });
            $trLast.after($trNew);

            //  Re-assign Validation
            //var form = $("form")
            //    .removeData("validator")
            //    .removeData("unobtrusiveValidation");
            //$.validator.unobtrusive.parse(form);
        });
        $("#addnewlead").click(function (e) {
            var markup;
            e.preventDefault();
            $("#dataTablelead").show();
            //  $("#dataTablebank").show();
            debugger;
            var $tableBody = $("#dataTablelead");
            var $trLast = $tableBody.find("tr:last");

            var $trNew;

            var suffix = $trLast.find(':input:first').attr('name');
            debugger;
            if (typeof (suffix) != "undefined") {

                $trNew = $trLast.clone();
            }
            else {

                $trNew = "<tr style='border:1px solid black'><td><input class='input100' placeholder='UserName' id='AgentContact_0_Mobile' name='AgentContact[0].Mobile' type='text'/></td><td><input class='input100' placeholder='UserEmail' id='AgentContact_0_Email'  name='AgentContact[0].Email' type='text'/></td><td><a href='#' onclick='Deleteqry(this)' class='remove'>Remove</a></td></tr>";
                $trLast.after($trNew);
            }

            var suffix = $trNew.find(':input:first').attr('name').match(/\d+/);
            $trNew.find("td:last").html('<a href="#" onclick="Deleteqry(this)" class="remove">Remove</a>');
            $.each($trNew.find(':input,select'), function (i, val) {
                // Replaced Name
                var oldN = $(this).attr('name');
                var newN = oldN.replace('[' + suffix + ']', '[' + (parseInt(suffix) + 1) + ']');
                $(this).attr('name', newN);
                //Replaced value
                debugger;
                var type = $(this).attr('type');
                if (typeof (type) != "undefined") {
                    if (type.toLowerCase() == "text") {
                        $(this).attr('value', '');
                    }

                }
                // If you have another Type then replace with default value
                $(this).removeClass("input-validation-error");

            });
            $trLast.after($trNew);

            //  Re-assign Validation
            //var form = $("form")
            //    .removeData("validator")
            //    .removeData("unobtrusiveValidation");
            //$.validator.unobtrusive.parse(form);
        });
        $("#addnewescort").click(function (e) {
            var markup;
            e.preventDefault();
            $("#dataTableescort").show();
            //  $("#dataTablebank").show();
            debugger;
            var $tableBody = $("#dataTableescort");
            var $trLast = $tableBody.find("tr:last");

            var $trNew;

            var suffix = $trLast.find(':input:first').attr('name');
            debugger;
            if (typeof (suffix) != "undefined") {

                $trNew = $trLast.clone();
            }
            else {

                $trNew = "<tr style='border:1px solid black'><td><input class='input100' placeholder='UserName' id='AgentContact_0_Mobile' name='AgentContact[0].Mobile' type='text'/></td><td><input class='input100' placeholder='UserEmail' id='AgentContact_0_Email'  name='AgentContact[0].Email' type='text'/></td><td><a href='#' onclick='Deleteqry(this)' class='remove'>Remove</a></td></tr>";
                $trLast.after($trNew);
            }

            var suffix = $trNew.find(':input:first').attr('name').match(/\d+/);
            $trNew.find("td:last").html('<a href="#" onclick="Deleteqry(this)" class="remove">Remove</a>');
            $.each($trNew.find(':input,select'), function (i, val) {
                // Replaced Name
                var oldN = $(this).attr('name');
                var newN = oldN.replace('[' + suffix + ']', '[' + (parseInt(suffix) + 1) + ']');
                $(this).attr('name', newN);
                //Replaced value
                debugger;
                var type = $(this).attr('type');
                if (typeof (type) != "undefined") {
                    if (type.toLowerCase() == "text") {
                        $(this).attr('value', '');
                    }

                }
                // If you have another Type then replace with default value
                $(this).removeClass("input-validation-error");

            });
            $trLast.after($trNew);

            //  Re-assign Validation
            //var form = $("form")
            //    .removeData("validator")
            //    .removeData("unobtrusiveValidation");
            //$.validator.unobtrusive.parse(form);
        });
        $("#addnewdemo").click(function (e) {
            var markup;
            e.preventDefault();
            $("#dataTabledemo").show();
            //  $("#dataTablebank").show();
            debugger;
            var $tableBody = $("#dataTabledemo");
            var $trLast = $tableBody.find("tr:last");

            var $trNew;

            var suffix = $trLast.find(':input:first').attr('name');
            debugger;
            if (typeof (suffix) != "undefined") {

                $trNew = $trLast.clone();
            }
            else {

                $trNew = "<tr style='border:1px solid black'><td><input class='input100' placeholder='UserName' id='AgentContact_0_Mobile' name='AgentContact[0].Mobile' type='text'/></td><td><input class='input100' placeholder='UserEmail' id='AgentContact_0_Email'  name='AgentContact[0].Email' type='text'/></td><td><a href='#' onclick='Deleteqry(this)' class='remove'>Remove</a></td></tr>";
                $trLast.after($trNew);
            }

            var suffix = $trNew.find(':input:first').attr('name').match(/\d+/);
            $trNew.find("td:last").html('<a href="#" onclick="Deleteqry(this)" class="remove">Remove</a>');
            $.each($trNew.find(':input,select'), function (i, val) {
                // Replaced Name
                var oldN = $(this).attr('name');
                var newN = oldN.replace('[' + suffix + ']', '[' + (parseInt(suffix) + 1) + ']');
                $(this).attr('name', newN);
                //Replaced value
                debugger;
                var type = $(this).attr('type');
                if (typeof (type) != "undefined") {
                    if (type.toLowerCase() == "text") {
                        $(this).attr('value', '');
                    }

                }
                // If you have another Type then replace with default value
                $(this).removeClass("input-validation-error");

            });
            $trLast.after($trNew);

            //  Re-assign Validation
            //var form = $("form")
            //    .removeData("validator")
            //    .removeData("unobtrusiveValidation");
            //$.validator.unobtrusive.parse(form);
        });

    });
    function Deleteqry(_this) {
        if (confirm("Are you sure you want to delete this Row?") == true)
            $(_this).closest('tr').remove();
        return false;
    }
</script>


